import React, { useState } from 'react';

const SurveyApp = () => {
  const [currentView, setCurrentView] = useState('menu'); // 'menu' –∏–ª–∏ 'survey'
  const [selectedSurvey, setSelectedSurvey] = useState(null);

  // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç
  const surveys = [
    {
      id: 1,
      title: "–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞",
      icon: "üìä",
      description: "test_form"
    },
    {
      id: 2,
      title: "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–º",
      icon: "üòä",
       description: "test_form"
    },
    {
      id: 3,
      title: "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ",
      icon: "üîç",
       description: "test_form"
    }
  ];

  const handleSurveySelect = (surveyId) => {
    setSelectedSurvey(surveyId);
    setCurrentView('survey');
  };

  const handleReturnToMenu = () => {
    setCurrentView('menu');
    setSelectedSurvey(null);
  };

  // –°—Ç–∏–ª–∏ –≤ GitHub-—Å—Ç–∏–ª–µ

    const styles = {
        appContainer: {
          maxWidth: '1000px',
          margin: '0 auto',
          padding: '20px',
          fontFamily: '"JetBrains Mono", monospace',
          color: '#ffffff',
          backgroundColor: '#0d1117',
          minHeight: '100vh'
        },
        header: {
          backgroundColor: '#161b22',
          color: '#ffffff',
          padding: '20px',
          borderRadius: '6px',
          marginBottom: '30px',
          display: 'flex',
          justifyContent: 'space-between',
          alignItems: 'center',
          border: '1px solid #30363d'
        },
        companyName: {
          fontSize: '24px',
          fontWeight: '600',
          display: 'flex',
          alignItems: 'center',
          color: '#f0f6fc'
        },
        logo: {
          marginRight: '10px',
          fontSize: '28px',
          color: '#58a6ff'
        },
        searchInput: {
          padding: '8px 12px',
          borderRadius: '6px',
          border: '1px solid #30363d',
          width: '300px',
          fontSize: '14px',
          outline: 'none',
          backgroundColor: '#0d1117',
          color: '#c9d1d9',
          fontFamily: '"JetBrains Mono", monospace',
          '&:focus': {
            borderColor: '#58a6ff',
            boxShadow: '0 0 0 3px rgba(56, 139, 253, 0.4)'
          }
        },
        menuTitle: {
          fontSize: '20px',
          fontWeight: '600',
          marginBottom: '20px',
          textAlign: 'center',
          color: '#f0f6fc'
        },
        surveysGrid: {
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))',
          gap: '20px',
          marginBottom: '30px'
        },
        surveyCard: {
          backgroundColor: '#161b22',
          border: '1px solid #30363d',
          borderRadius: '6px',
          padding: '20px',
          cursor: 'pointer',
          transition: 'transform 0.2s, box-shadow 0.2s, border-color 0.2s',
          color: '#f0f6fc',
          '&:hover': {
            transform: 'translateY(-5px)',
            boxShadow: '0 5px 15px rgba(56, 139, 253, 0.1)',
            borderColor: '#58a6ff'
          }
        },
        surveyIcon: {
          fontSize: '40px',
          marginBottom: '15px',
          textAlign: 'center',
          color: '#58a6ff'
        },
        surveyTitle: {
          fontSize: '18px',
          fontWeight: '600',
          marginBottom: '10px',
          textAlign: 'center',
          color: '#f0f6fc'
        },
        surveyDescription: {
          color: '#8b949e',
          textAlign: 'center',
          fontSize: '14px'
        }
      };
  

  if (currentView === 'menu') {
    return (
      <div style={styles.appContainer}>
        <div style={styles.header}>
          <div style={styles.companyName}>
            <span style={styles.logo}>üìã</span>
            <span>AtomForm</span>
          </div>
          <input 
            type="text" 
            placeholder="–ü–æ–∏—Å–∫ –∞–Ω–∫–µ—Ç..." 
            style={styles.searchInput}
          />
        </div>
        
        <h2 style={styles.menuTitle}>test_form</h2>
        
        <div style={styles.surveysGrid}>
          {surveys.map(survey => (
            <div 
              key={survey.id} 
              style={styles.surveyCard}
              onClick={() => handleSurveySelect(survey.id)}
            >
              <div style={styles.surveyIcon}>{survey.icon}</div>
              <h3 style={styles.surveyTitle}>{survey.title}</h3>
              <p style={styles.surveyDescription}>{survey.description}</p>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <SurveyForm 
      theme="default" 
      onReturnToMenu={handleReturnToMenu}
    />
  );
};

const SurveyForm = ({ theme, onReturnToMenu }) => {
  const [currentStep, setCurrentStep] = useState(0);
  const [answers, setAnswers] = useState({});
  const [isSubmitted, setIsSubmitted] = useState(false);

  const questions = [
    {
      id: 1,
      question: "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à –ø—Ä–æ–¥—É–∫—Ç?",
      options: ["–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "–†–µ–¥–∫–æ"]
    },
    {
      id: 2,
      question: "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º?",
      options: ["–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", "–ù–µ –¥–æ–≤–æ–ª–µ–Ω"]
    },
    {
      id: 3,
      question: "–ö–∞–∫ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?",
      options: ["–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥—Ä—É–∑–µ–π", "–†–µ–∫–ª–∞–º–∞"]
    },
    {
      id: 4,
      question: "–ö–∞–∫–æ–≤–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ –≤—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –Ω–∞—Å?",
      options: ["–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é", "–ù–µ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é"]
    },
    {
      id: 5,
      question: "–ß—Ç–æ –¥–ª—è –≤–∞—Å –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω–æ –≤ –Ω–∞—à–µ–º –ø—Ä–æ–¥—É–∫—Ç–µ?",
      options: ["–ö–∞—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞", "–£–¥–æ–±—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"]
    },
    {
      id: 6,
      question: "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É?",
      options: ["–û—Ç–ª–∏—á–Ω–æ", "–°—Ä–µ–¥–Ω–µ", "–ü–ª–æ—Ö–æ"]
    },
    {
      id: 7,
      question: "–ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç?",
      options: ["–ë–æ–ª—å—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏", "–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω"]
    },
    {
      id: 8,
      question: "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Å—Ç–∞–ª–∫–∏–≤–∞–µ—Ç–µ—Å—å —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏?",
      options: ["–ù–∏–∫–æ–≥–¥–∞", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ"]
    },
    {
      id: 9,
      question: "–ö–∞–∫–æ–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å?",
      options: ["–°–º–∞—Ä—Ç—Ñ–æ–Ω", "–ö–æ–º–ø—å—é—Ç–µ—Ä", "–ü–ª–∞–Ω—à–µ—Ç"]
    },
    {
      id: 10,
      question: "–ö–∞–∫–æ–π –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏?",
      options: ["–í—ã—Å–æ–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ù–∏–∑–∫–∏–π"]
    }
  ];

  const handleOptionChange = (questionId, option) => {
    setAnswers({
      ...answers,
      [questionId]: option
    });
  };

  const handleNext = () => {
    if (currentStep < questions.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrev = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleSubmit = () => {
    console.log("–û—Ç–≤–µ—Ç—ã:", answers);
    setIsSubmitted(true);
  };

  const resetForm = () => {
    setCurrentStep(0);
    setAnswers({});
    setIsSubmitted(false);
    onReturnToMenu();
  };

  // –°—Ç–∏–ª–∏ –≤ GitHub-—Å—Ç–∏–ª–µ
  const styles = {
    container: {
      maxWidth: '800px',
      margin: '0 auto',
      padding: '20px',
      fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif',
      color: '#24292e'
    },
    header: {
      textAlign: 'center',
      marginBottom: '30px',
      color: 'white'
    },
    questionContainer: {
      backgroundColor: '#f6f8fa',
      border: '1px solid #e1e4e8',
      borderRadius: '6px',
      padding: '20px',
      marginBottom: '20px'
    },
    questionText: {
      fontSize: '18px',
      fontWeight: '600',
      marginBottom: '15px'
    },
    optionContainer: {
      marginBottom: '10px'
    },
    radioInput: {
      marginRight: '10px',
      accentColor: '#2ea44f'
    },
    radioLabel: {
      cursor: 'pointer',
      display: 'flex',
      alignItems: 'center'
    },
    buttonContainer: {
      display: 'flex',
      justifyContent: 'space-between',
      marginTop: '20px'
    },
    button: {
      backgroundColor: '#2ea44f',
      color: 'white',
      border: 'none',
      padding: '10px 16px',
      borderRadius: '6px',
      cursor: 'pointer',
      fontSize: '14px',
      fontWeight: '600',
      outline: 'none'
    },
    buttonDisabled: {
      backgroundColor: '#f6f8fa',
      color: '#959da5',
      cursor: 'not-allowed'
    },
    submitButton: {
      backgroundColor: '#0366d6'
    },
    completionContainer: {
      textAlign: 'center',
      padding: '40px'
    },
    checkmark: {
      color: '#2ea44f',
      fontSize: '60px',
      marginBottom: '20px'
    },
    completionText: {
      fontSize: '24px',
      marginBottom: '30px'
    },
    progress: {
      height: '5px',
      backgroundColor: '#e1e4e8',
      borderRadius: '3px',
      marginBottom: '20px'
    },
    progressBar: {
      height: '100%',
      backgroundColor: '#2ea44f',
      borderRadius: '3px',
      width: `${((currentStep + 1) / questions.length) * 100}%`,
      transition: 'width 0.3s ease'
    }
  };

  if (isSubmitted) {
    return (
      <div style={styles.container}>
        <div style={styles.completionContainer}>
          <div style={styles.checkmark}>‚úì</div>
          <h2 style={styles.completionText}>–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ!</h2>
          <button 
            style={{ ...styles.button, ...styles.submitButton }} 
            onClick={resetForm}
          >
            –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é
          </button>
        </div>
      </div>
    );
  }

  const currentQuestion = questions[currentStep];

  return (
    <div style={styles.container}>
      <h1 style={styles.header}>–ê–Ω–∫–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h1>
      
      <div style={styles.progress}>
        <div style={styles.progressBar}></div>
      </div>
      
      <div style={styles.questionContainer}>
        <div style={styles.questionText}>
          {currentQuestion.id}. {currentQuestion.question}
        </div>
        
        {currentQuestion.options.map((option, index) => (
          <div key={index} style={styles.optionContainer}>
            <label style={styles.radioLabel}>
              <input
                type="radio"
                name={`question-${currentQuestion.id}`}
                value={option}
                checked={answers[currentQuestion.id] === option}
                onChange={() => handleOptionChange(currentQuestion.id, option)}
                style={styles.radioInput}
              />
              {option}
            </label>
          </div>
        ))}
      </div>
      
      <div style={styles.buttonContainer}>
        <button
          style={{ ...styles.button, ...(currentStep === 0 ? styles.buttonDisabled : {}) }}
          onClick={handlePrev}
          disabled={currentStep === 0}
        >
          –ù–∞–∑–∞–¥
        </button>
        
        {currentStep < questions.length - 1 ? (
          <button
            style={{ ...styles.button, ...(!answers[currentQuestion.id] ? styles.buttonDisabled : {}) }}
            onClick={handleNext}
            disabled={!answers[currentQuestion.id]}
          >
            –î–∞–ª–µ–µ
          </button>
        ) : (
          <button
            style={{ ...styles.button, ...styles.submitButton, ...(!answers[currentQuestion.id] ? styles.buttonDisabled : {}) }}
            onClick={handleSubmit}
            disabled={!answers[currentQuestion.id]}
          >
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </button>
        )}
      </div>
    </div>
  );
};

export default SurveyApp;